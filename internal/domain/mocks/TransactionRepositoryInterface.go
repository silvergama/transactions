// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/silvergama/transations/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// TransactionRepositoryInterface is an autogenerated mock type for the TransactionRepositoryInterface type
type TransactionRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, transaction
func (_m *TransactionRepositoryInterface) Create(ctx context.Context, transaction *domain.Transaction) (int, error) {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transaction) (int, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transaction) int); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionRepositoryInterface creates a new instance of TransactionRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepositoryInterface {
	mock := &TransactionRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
